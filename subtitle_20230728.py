import os
import urllib.request as req
import requests
from bs4 import BeautifulSoup as bs
from webcrawler_20230719 import timeLag

# def download_file(url, custom_filename):
#     save_path = 'C:/subtitle/'
#     response = requests.get(url, stream=True, allow_redirects=True)
#     if response.status_code == 200:
#         file_path = os.path.join(save_path, custom_filename)
#         with open(file_path, 'wb') as f:
#             for chunk in response.iter_content(chunk_size=8192):
#                 f.write(chunk)
#         print(f"File '{custom_filename}' downloaded successfully and saved at {save_path}")
#     else:
#         print("Failed to download the file")

def download_file(url, custom_filename):
    try:
        filesub = url[url.rfind("."):]
        file_path = 'C:\\subtitle\\{}{}'.format(custom_filename,filesub)

        req.urlretrieve(url, file_path)
        return True
    except:
        return False

TITLEeng = [
    'Lawrence+of+Arabia',
'+The+Longest+Day',
"+Meredith+Willson's+The+Music+Man",
'+Mutiny+on+the+Bounty',
'+To+Kill+a+Mockingbird',
'+America+America',
'+Cleopatra',
'+How+the+West+Was+Won',
'+Lilies+of+the+Field',
'+Tom+Jones',
'+Becket',
'+Dr.+Strangelove+or:+How+I+Learned+to+Stop+Worrying+and+Love+the+Bomb',
'+Mary+Poppins',
'+My+Fair+Lady',
'+Zorba+the+Greek',
'+Darling',
'+Doctor+Zhivago',
'+Ship+of+Fools',
'+The+Sound+of+Music',
'+A+Thousand+Clowns',
'+Alfie',
'+A+Man+for+All+Seasons',
'+The+Russians+Are+Coming+The+Russians+Are+Coming',
'+The+Sand+Pebbles',
"+Who's+Afraid+of+Virginia+Woolf?",
'+Bonnie+and+Clyde',
'+Doctor+Dolittle',
'+The+Graduate',
"+Guess+Who's+Coming+to+Dinner",
'+In+the+Heat+of+the+Night',
'+Funny+Girl',
'+The+Lion+in+Winter',
'+Oliver!',
'+Rachel,+Rachel',
'+Romeo+and+Juliet',
'+Anne+of+the+Thousand+Days',
'+Butch+Cassidy+and+the+Sundance+Kid',
'+Hello,+Dolly!',
'+Midnight+Cowboy',
'+Z',
'+Airport',
'+Five+Easy+Pieces',
'+Love+Story',
'+M*A*S*H',
'+Patton',
'+A+Clockwork+Orange',
'+Fiddler+on+the+Roof',
'+The+French+Connection',
'+The+Last+Picture+Show',
'+Nicholas+and+Alexandra',
'+Cabaret',
'+Deliverance',
'+The+Emigrants',
'+The+Godfather',
'+Sounder',
'+American+Graffiti',
'+Cries+and+Whispers',
'+The+Exorcist',
'+The+Sting',
'+A+Touch+of+Class',
'+Chinatown',
'+The+Conversation',
'+The+Godfather+Part+II',
'+Lenny',
'+The+Towering+Inferno',
'+Barry+Lyndon',
'+Dog+Day+Afternoon',
'+Jaws',
'+Nashville',
"+One+Flew+over+the+Cuckoo's+Nest",
"+All+the+President's+Men",
'+Bound+for+Glory',
'+Network',
'+Rocky',
'+Taxi+Driver',
'+Annie+Hall',
'+The+Goodbye+Girl',
'+Julia',
'+Star+Wars',
'+The+Turning+Point',
'+Coming+Home',
'+The+Deer+Hunter',
'+Heaven+Can+Wait',
'+Midnight+Express',
'+An+Unmarried+Woman',
'+All+That+Jazz',
'+Apocalypse+Now',
'+Breaking+Away',
'+Kramer+vs.+Kramer',
'+Norma+Rae',
"+Coal+Miner's+Daughter",
'+The+Elephant+Man',
'+Ordinary+People',
'+Raging+Bull',
'+Tess',
'+Atlantic+City',
'+Chariots+of+Fire',
'+On+Golden+Pond',
'+Raiders+of+the+Lost+Ark',
'+Reds',
'+E.T.+The+Extra-Terrestrial',
'+Gandhi',
'+Missing',
'+Tootsie',
'+The+Verdict',
'+The+Big+Chill',
'+The+Dresser',
'+The+Right+Stuff',
'+Tender+Mercies',
'+Terms+of+Endearment',
'+Amadeus',
'+The+Killing+Fields',
'+A+Passage+to+India',
'+Places+in+the+Heart',
"+A+Soldier's+Story",
'+The+Color+Purple',
'+Kiss+of+the+Spider+Woman',
'+Out+of+Africa',
"+Prizzi's+Honor",
'+Witness',
'+Children+of+a+Lesser+God',
'+Hannah+and+Her+Sisters',
'+The+Mission',
'+Platoon',
'+A+Room+with+a+View',
'+Broadcast+News',
'+Fatal+Attraction',
'+Hope+and+Glory',
'+The+Last+Emperor',
'+Moonstruck',
'+The+Accidental+Tourist',
'+Dangerous+Liaisons',
'+Mississippi+Burning',
'+Rain+Man',
'+Working+Girl',
'+Born+on+the+Fourth+of+July',
'+Dead+Poets+Society',
'+Driving+Miss+Daisy',
'+Field+of+Dreams',
'+My+Left+Foot',
'+Awakenings',
'+Dances+With+Wolves',
'+Ghost',
'+The+Godfather,+Part+III',
'+Good+Fellas',
'+Beauty+and+the+Beast',
'+Bugsy',
'+JFK',
'+The+Prince+of+Tides',
'+The+Silence+of+the+Lambs',
'+The+Crying+Game',
'+A+Few+Good+Men',
'+Howards+End',
'+Scent+of+a+Woman',
'+Unforgiven',
'+The+Fugitive',
'+In+the+Name+of+the+Father',
'+The+Piano',
'+The+Remains+of+the+Day',
"+Schindler's+List",
'+Forrest+Gump',
'+Four+Weddings+and+a+Funeral',
'+Pulp+Fiction',
'+Quiz+Show',
'+The+Shawshank+Redemption',
'+Apollo+13',
'+Babe',
'+Braveheart+',
'+The+Postman+(Il+Postino)',
'+Sense+and+Sensibility',
'+The+English+Patient',
'+Fargo',
'+Jerry+Maguire',
'+Secrets+&+Lies',
'+Shine',
'+As+Good+as+It+Gets',
'+The+Full+Monty',
'+Good+Will+Hunting',
'+L.A.+Confidential',
'+Titanic',
'+Elizabeth',
'+Life+Is+Beautiful',
'+Saving+Private+Ryan',
'+Shakespeare+in+Love',
'+The+Thin+Red+Line',
'+American+Beauty',
'+The+Cider+House+Rules',
'+The+Green+Mile',
'+The+Insider',
'+The+Sixth+Sense',
'+Chocolat',
'+Crouching+Tiger,+Hidden+Dragon',
'+Erin+Brockovich',
'+Gladiator',
'+Traffic',
'+A+Beautiful+Mind',
'+Gosford+Park',
'+In+the+Bedroom',
'+The+Lord+of+the+Rings:+The+Fellowship+of+the+Ring',
'+Moulin+Rouge',
'+Chicago',
'+Gangs+of+New+York',
'+The+Hours',
'+The+Lord+of+the+Rings:+The+Two+Towers',
'+The+Pianist',
'+The+Lord+of+the+Rings:+The+Return+of+the+King',
'+Lost+in+Translation',
'+Master+and+Commander:+The+Far+Side+of+the+World',
'+Mystic+River',
'+Seabiscuit',
'+The+Aviator',
'+Finding+Neverland',
'+Million+Dollar+Baby',
'+Ray',
'+Sideways',
'+Brokeback+Mountain',
'+Capote',
'+Crash',
'+Good+Night,+and+Good+Luck.',
'+Munich',
'+Babel',
'+The+Departed',
'+Letters+from+Iwo+Jima',
'+Little+Miss+Sunshine',
'+The+Queen',
'+Atonement',
'+Juno',
'+Michael+Clayton',
'+No+Country+for+Old+Men',
'+There+Will+Be+Blood',
'+The+Curious+Case+of+Benjamin+Button',
'+Frost/Nixon',
'+Milk',
'+The+Reader',
'+Slumdog+Millionaire',
'+Avatar',
'+The+Blind+Side',
'+District+9',
'+An+Education',
'+The+Hurt+Locker',
'+Inglourious+Basterds',
"+Precious:+Based+on+the+Novel+'Push'+by+Sapphire",
'+A+Serious+Man',
'+Up',
'+Up+in+the+Air',
'+Black+Swan',
'+The+Fighter',
'+Inception',
'+The+Kids+Are+All+Right',
"+The+King's+Speech",
'+127+Hours',
'+The+Social+Network',
'+Toy+Story+3',
'+True+Grit',
"+Winter's+Bone",
'+The+Artist',
'+The+Descendants',
'+Extremely+Loud+&+Incredibly+Close',
'+The+Help',
'+Hugo',
'+Midnight+in+Paris',
'+Moneyball',
'+The+Tree+of+Life',
'+War+Horse',
'+Amour',
'+Argo',
'+Beasts+of+the+Southern+Wild',
'+Django+Unchained',
'+Les+Misérables',
'+Life+of+Pi',
'+Lincoln',
'+Silver+Linings+Playbook',
'+Zero+Dark+Thirty',
'+American+Hustle',
'+Captain+Phillips',
'+Dallas+Buyers+Club',
'+Gravity',
'+Her',
'+Nebraska',
'+Philomena',
'+12+Years+a+Slave',
'+The+Wolf+of+Wall+Street',
'+American+Sniper',
'+Birdman+or+(The+Unexpected+Virtue+of+Ignorance)',
'+Boyhood',
'+The+Grand+Budapest+Hotel',
'+The+Imitation+Game',
'+Selma',
'+The+Theory+of+Everything',
'+Whiplash',
'+The+Big+Short',
'+Bridge+of+Spies',
'+Brooklyn',
'+Mad+Max:+Fury+Road',
'+The+Martian',
'+The+Revenant',
'+Room',
'+Spotlight',
'+Arrival',
'+Fences',
'+Hacksaw+Ridge',
'+Hell+or+High+Water',
'+Hidden+Figures',
'+La+La+Land',
'+Lion',
'+Manchester+by+the+Sea',
'+Moonlight',
'+Call+Me+by+Your+Name',
'+Darkest+Hour',
'+Dunkirk',
'+Get+Out',
'+Lady+Bird',
'+Phantom+Thread',
'+The+Post',
'+The+Shape+of+Water',
'+Three+Billboards+outside+Ebbing,+Missouri',
'+Black+Panther',
'+BlacKkKlansman',
'+Bohemian+Rhapsody',
'+The+Favourite',
'+Green+Book',
'+Roma',
'+A+Star+Is+Born',
'+Vice',
'+Ford+v+Ferrari',
'+The+Irishman',
'+Jojo+Rabbit',
'+Joker',
'+Little+Women',
'+Marriage+Story',
'1917',
'+Once+upon+a+Time...in+Hollywood',
'+Parasite',
'+The+Father',
'+Judas+and+the+Black+Messiah',
'+Mank',
'+Minari',
'+Nomadland',
'+Promising+Young+Woman',
'+Sound+of+Metal',
'+The+Trial+of+the+Chicago+7',
'+Belfast',
'+CODA',
"+Don't+Look+Up",
'+Drive+My+Car',
'+Dune',
'+King+Richard',
'+Licorice+Pizza',
'+Nightmare+Alley',
'+The+Power+of+the+Dog',
'+West+Side+Story',
'+All+Quiet+on+the+Western+Front',
'+Avatar:+The+Way+of+Water',
'+The+Banshees+of+Inisherin',
'+Elvis',
'+Everything+Everywhere+All+at+Once',
'+The+Fabelmans',
'+Tár',
'+Top+Gun:+Maverick',
'+Triangle+of+Sadness',
'+Women+Talking',
]
MID = [
'1292349',
'1293626',
'1296180',
'1292862',
'1297991',
'1469159',
'1292550',
'1296467',
'1294920',
'1292591',
'1947729',
'1322848',
'1292658',
'1297965',
'1417676',
'1437774',
'1389949',
'1293228',
'1294408',
'1297205',
'1483944',
'1296260',
'1292566',
'1298812',
'1295137',
'1294584',
'27000981',
'1292271',
'1293688',
'1295480',
'1300891',
'1293104',
'1293219',
'1293413',
'1295467',
'1298762',
'1297602',
'1293094',
'1297628',
'1299026',
'1293348',
'1298192',
'1294768',
'1292766',
'1298308',
'1292233',
'1298517',
'3013046',
'1298026',
'1295425',
'1296282',
'1293561',
'1295184',
'1291841',
'1293307',
'1300106',
'1296147',
'1293755',
'1292269',
'1292941',
'1293889',
'1296908',
'1299131',
'1294087',
'1298056',
'1292472',
'1293374',
'1294941',
'1293037',
'1292224',
'1293715',
'1293194',
'1297531',
'1295742',
'1292222',
'1296987',
'1293505',
'3110825',
'1293838',
'1292563',
'1295688',
'1292403',
'1293809',
'1296827',
'1293163',
'1299330',
'1292260',
'1292932',
'1300685',
'1294986',
'1295805',
'1293200',
'1294925',
'1293155',
'1291872',
'1294508',
'1300487',
'1293767',
'1296717',
'1292891',
'1294638',
'1292238',
'1292927',
'1297737',
'1300725',
'1293796',
'1295692',
'1293371',
'1300520',
'1293341',
'1293399',
'1296617',
'1291834',
'1292667',
'1294327',
'1294503',
'1299879',
'1291840',
'1293804',
'1293229',
'1300422',
'1292764',
'1294620',
'1293396',
'1293926',
'1292511',
'1294587',
'1294245',
'1293172',
'1292869',
'1293736',
'1295713',
'1300365',
'1291870',
'1294849',
'1292874',
'1291548',
'1293204',
'1294070',
'1294000',
'1296805',
'1293764',
'1293203',
'1294240',
'1292268',
'1297995',
'1292452',
'1292230',
'1297398',
'1293544',
'1298370',
'1295260',
'1293706',
'1298624',
'1293566',
'1297229',
'1297009',
'1293818',
'1293004',
'1295124',
'1292720',
'1294950',
'1291832',
'1292759',
'1292052',
'1293785',
'1292765',
'1294639',
'1298468',
'1299193',
'1291853',
'1292067',
'1293158',
'1294477',
'1292225',
'1293917',
'1292541',
'1292656',
'1292348',
'1292722',
'1296223',
'1292063',
'1292849',
'1300220',
'1292781',
'1292062',
'1296821',
'1300374',
'1292660',
'1297630',
'1301890',
'1301168',
'1293050',
'1293530',
'1299235',
'1306029',
'1306860',
'1306604',
'1291571',
'1304641',
'1307697',
'1301061',
'1305666',
'1291572',
'1296736',
'1291552',
'1291835',
'1307749',
'1307748',
'1307535',
'1309070',
'1308831',
'1309016',
'1309085',
'1291833',
'1418834',
'1422957',
'1388216',
'1431617',
'35240917',
'1498818',
'1315316',
'1917171',
'1777612',
'1866264',
'1950148',
'2132495',
'1905790',
'1857099',
'1945780',
'1485260',
'2062678',
'2336737',
'2213597',
'2209573',
'1652587',
'3552028',
'3006772',
'3011093',
'2028645',
'1438652',
'3011072',
'3135483',
'2129039',
'3077791',
'1978709',
'2056093',
'3541415',
'3569969',
'4023638',
'4164444',
'3205624',
'1858711',
'3626372',
'3610676',
'6097775',
'3071509',
'3078514',
'3792848',
'2028677',
'4319218',
'3023164',
'2336735',
'4206436',
'4798707',
'6549903',
'7015714',
'6307447',
'6860160',
'1929463',
'1889242',
'3094909',
'6430835',
'6873657',
'4116480',
'1793929',
'3793783',
'6722879',
'6538833',
'19973780',
'6879185',
'2997076',
'21263666',
'20438962',
'2209575',
'11525673',
'10463953',
'3089638',
'24815950',
'25773932',
'26303622',
'25908051',
'10741220',
'3592854',
'25864085',
'5327268',
'25724855',
'25954475',
'21324900',
'21339682',
'26325320',
'26389148',
'26615208',
'25934014',
'26220650',
'25980443',
'26648249',
'26799731',
'26761416',
'26607693',
'26688480',
'26588314',
'26809592',
'26990609',
'26752852',
'26611804',
'6390825',
'27133913',
'5300054',
'26628282',
'27060077',
'1950330',
'4058933',
'26920842',
'6538866',
'6981153',
'30170546',
'27119724',
'26348103',
'27202818',
'30252495',
'27087724',
'27010768',
'33432655',
'30464264',
'34461705',
'34463995',
'30458949',
'30450313',
'26716348',
'2609258',
'35299584',
'35048413',
'34884712',
'35235502',
'3001114',
'30481476',
'34888057',
'27605105',
'33437152',
'26820621',
'3042261',
'4811774',
'34969348',
'26305582',
'30314848',
'35390098',
'35430833',
'6893932',
'27066152',
'35290372',
]

movie_not_found = []

count = 232
for movie in TITLEeng[count:]:
    try:
        # URL of the OpenSubtitles website
        url = "https://assrt.net/sub/?searchword="+ movie +"&utm_source=current_search&utm_medium=sug&utm_campaign=search"

        request = req.Request(url, headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'
    })
        with req.urlopen(request) as response:
            data = response.read().decode('utf-8')
        #解析原始碼，取得每篇文章的標題
        root = bs(data, 'html.parser')
        # Find the download link
        # print(bs.prettify(root), '\n =================')
        prefix = 'https://assrt.net'
        suffix = root.find_all('a', {'class': 'introtitle'})[0]['href']
        target_movie = prefix + str(suffix)
        print('target movie: ',target_movie)
        request2 = req.Request(target_movie, headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/111.0.0.0 Safari/537.36'
    })
        with req.urlopen(request2) as response2:
            data2 = response2.read().decode('utf-8')
        #解析原始碼，取得每篇文章的標題
        root2 = bs(data2, 'html.parser')
        download_link_suffix = root2.find_all('a', {'id': 'downsubbtn'})[0]['href']
        # print(download_link_suffix)
        download_link = prefix + str(download_link_suffix)
        print('download link: ',download_link)

    # # Save the file
        download_file(download_link, f'{MID[count]}')
        print('just finished: ', MID[count], '; index in the list: ', count)
        count+=1
        print('unprocessed: ', (361-count))
        timeLag()
    except Exception as e:
        print('===========\nException: ',e)
        movie_not_found.append(movie)
        count+=1
        print(f'movie not found: {movie}\n==================')
        if e == '<urlopen error [WinError 10054] 遠端主機已強制關閉一個現存的連線。>':
            print('||||||we got banned.')
            break
        timeLag()
        continue
    
print('all movie not found: ',movie_not_found,f' ({len(movie_not_found)})')

